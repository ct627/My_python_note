# A. import libraries 

```
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
from pandas.plotting import scatter_matrix

import matplotlib.pyplot as plt
from matplotlib import rcParams

import seaborn as sb
sb.set_style('whitegrid')

%matplotlib inline
```

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# B. Graphics (basic usage)
---
## assumptions: x and y are just a list , df is a dataframe from a Pandas object , and filename is any dataframe file name you are going to use.
## where one variable or more variables use : df = file_name['selected variable'] or df = file_name[['selected variable 1','selected variable 2','selected variable 3']].
---

## line chart (two ways)
```
plt.plot(x,y) 

df.plot()
```

## bar chart (two ways)
```
plt.bar(x,y)

df.plot(kind = 'bar') 
df.plot(kind = 'barh') ### use barh instead of bar makes the chart horizontally. 
```

## histogram (three ways)
```
plt.hist(df)
plt.plot()

df.plot(kind='hist')

sb.distplot(df)
```

## pie chart (one way)
```
plt.pie(x)
plt.show()
```

## scatter plot
```
sb.pairplot(filename)

sb.pairplot(car_subset)
plt.show()
```

## boxplots (two ways)
```
filename.boxplot(column = 'selected variable 1',by = 'selected variable 2')

sb.boxplot(x = 'selected x variable',y = 'selected y variable',data=dataname)
```

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# C. Add detail (two methods)

[Editing] 

-The functional method example
plt.xlabel('your x-axis label')
plt.ylabel('your y-axis label')
plt.legend(veh_type,loc='best')
plt.pie(x, labels=labels, colors = colors)
-The object-oriented method





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# D. Save Graph

```
plt.savefig('filename.png')
plt.show() ## This avoid a blank file.
### supported formats: eps, pdf, pgf, png, ps, raw, rgba, svg, svgz.
%pwd 
### check the save path.
```
